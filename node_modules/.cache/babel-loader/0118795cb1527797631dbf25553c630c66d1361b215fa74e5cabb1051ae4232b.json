{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\king\\\\OneDrive\\\\Desktop\\\\edoculturalassociationitaly\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // Holds user state\n  const [error, setError] = useState(null); // Holds error state\n  const [loginSuccess, setLoginSuccess] = useState(false); // Holds login success state\n  const [events, setEvents] = useState([]); // Holds the events state\n\n  const login = (username, password) => {\n    return new Promise((resolve, reject) => {\n      // Example login logic\n      if (username === 'admin' && password === 'adminPassword') {\n        setUser({\n          name: 'Admin',\n          role: 'admin'\n        });\n        setError(null); // Clear any previous errors\n        setLoginSuccess(true); // Set login success\n        resolve(); // Login successful\n      } else {\n        setError('Invalid username or password'); // Set error message\n        reject(new Error('Invalid credentials')); // Reject the promise\n      }\n    });\n  };\n  const logout = () => {\n    setUser(null);\n    setError(null); // Clear error on logout\n    setLoginSuccess(false); // Reset login success on logout\n  };\n  const addEvent = event => {\n    setEvents(prevEvents => [...prevEvents, event]); // Add event to the events array\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      error,\n      loginSuccess,\n      events,\n      addEvent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"U/R27cuk0MjUEuxXQFWxLTI6Dvs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","error","setError","loginSuccess","setLoginSuccess","events","setEvents","login","username","password","Promise","resolve","reject","name","role","Error","logout","addEvent","event","prevEvents","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/king/OneDrive/Desktop/edoculturalassociationitaly/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null); // Holds user state\r\n    const [error, setError] = useState(null); // Holds error state\r\n    const [loginSuccess, setLoginSuccess] = useState(false); // Holds login success state\r\n    const [events, setEvents] = useState([]); // Holds the events state\r\n\r\n    const login = (username, password) => {\r\n        return new Promise((resolve, reject) => {\r\n            // Example login logic\r\n            if (username === 'admin' && password === 'adminPassword') {\r\n                setUser({ name: 'Admin', role: 'admin' });\r\n                setError(null); // Clear any previous errors\r\n                setLoginSuccess(true); // Set login success\r\n                resolve(); // Login successful\r\n            } else {\r\n                setError('Invalid username or password'); // Set error message\r\n                reject(new Error('Invalid credentials')); // Reject the promise\r\n            }\r\n        });\r\n    };\r\n\r\n    const logout = () => {\r\n        setUser(null);\r\n        setError(null); // Clear error on logout\r\n        setLoginSuccess(false); // Reset login success on logout\r\n    };\r\n\r\n    const addEvent = (event) => {\r\n        setEvents((prevEvents) => [...prevEvents, event]); // Add event to the events array\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout, error, loginSuccess, events, addEvent }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1C,MAAMe,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC;MACA,IAAIJ,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,eAAe,EAAE;QACtDT,OAAO,CAAC;UAAEa,IAAI,EAAE,OAAO;UAAEC,IAAI,EAAE;QAAQ,CAAC,CAAC;QACzCZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAChBE,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QACvBO,OAAO,CAAC,CAAC,CAAC,CAAC;MACf,CAAC,MAAM;QACHT,QAAQ,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAC1CU,MAAM,CAAC,IAAIG,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;MAC9C;IACJ,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjBhB,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAChBE,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMa,QAAQ,GAAIC,KAAK,IAAK;IACxBZ,SAAS,CAAEa,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAED,KAAK,CAAC,CAAC,CAAC,CAAC;EACvD,CAAC;EAED,oBACIxB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,IAAI;MAAEQ,KAAK;MAAES,MAAM;MAAEf,KAAK;MAAEE,YAAY;MAAEE,MAAM;MAAEY;IAAS,CAAE;IAAApB,QAAA,EACvFA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC3B,EAAA,CApCWF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAsCzB,OAAO,MAAM+B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMrC,UAAU,CAACI,WAAW,CAAC;AAAA;AAACiC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}