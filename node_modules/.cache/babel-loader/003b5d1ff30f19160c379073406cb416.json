{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\king\\\\OneDrive\\\\Desktop\\\\edoculturalassociationitaly\\\\src\\\\AuthProvider.js\";\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\n// Create the AuthContext\nconst AuthContext = createContext();\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null); // Holds user state\n  const [error, setError] = useState(null); // Holds error state\n  const [loginSuccess, setLoginSuccess] = useState(false); // Holds login success state\n  const [events, setEvents] = useState([]); // Holds the events state\n  const [members, setMembers] = useState([]); // Holds the registered members state\n\n  // Check if there is saved login info on component mount\n  useEffect(() => {\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\n    if (savedUser) {\n      setUser(savedUser);\n      setLoginSuccess(true);\n    }\n  }, []);\n\n  // Login function\n  const login = (username, password, rememberMe) => {\n    return new Promise((resolve, reject) => {\n      // Example login logic; you might want to replace this with actual authentication logic\n      if (username === 'admin' && password === 'admin') {\n        const loggedInUser = {\n          name: 'Admin',\n          role: 'admin'\n        };\n        setUser(loggedInUser);\n        setError(null); // Clear any previous errors\n        setLoginSuccess(true); // Set login success\n\n        // Save login info if \"Remember Me\" is checked\n        if (rememberMe) {\n          localStorage.setItem(\"user\", JSON.stringify(loggedInUser)); // Save user info\n        } else {\n          sessionStorage.setItem(\"user\", JSON.stringify(loggedInUser)); // Save user info in sessionStorage\n        }\n        resolve(); // Login successful\n      } else {\n        setError('Invalid username or password'); // Set error message\n        reject(new Error('Invalid credentials')); // Reject the promise\n      }\n    });\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n    setError(null); // Clear error on logout\n    setLoginSuccess(false); // Reset login success on logout\n    localStorage.removeItem(\"user\"); // Remove saved login info from localStorage\n    sessionStorage.removeItem(\"user\"); // Remove saved login info from sessionStorage\n  };\n\n  // Function to add events\n  const addEvent = event => {\n    setEvents(prevEvents => [...prevEvents, event]); // Add event to the events array\n  };\n\n  // Function to remove events\n  const removeEvent = eventToRemove => {\n    setEvents(prevEvents => prevEvents.filter(event => event !== eventToRemove)); // Remove event from the events array\n  };\n\n  // Function to add members\n  const addMember = member => {\n    setMembers(prevMembers => [...prevMembers, member]); // Add member to the members array\n  };\n\n  // Function to fetch events (optional, depending on your needs)\n  const fetchEvents = () => {\n    // Fetch events from an API or database\n    // Example: fetch('/api/events').then(response => response.json()).then(data => setEvents(data));\n  };\n\n  // Provide the context value\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      error,\n      loginSuccess,\n      events,\n      addEvent,\n      removeEvent,\n      fetchEvents,\n      members,\n      addMember\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, children);\n};\n\n// Custom hook to use the AuthContext\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","AuthContext","AuthProvider","children","user","setUser","error","setError","loginSuccess","setLoginSuccess","events","setEvents","members","setMembers","savedUser","JSON","parse","localStorage","getItem","login","username","password","rememberMe","Promise","resolve","reject","loggedInUser","name","role","setItem","stringify","sessionStorage","Error","logout","removeItem","addEvent","event","prevEvents","removeEvent","eventToRemove","filter","addMember","member","prevMembers","fetchEvents","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useAuth","context"],"sources":["C:/Users/king/OneDrive/Desktop/edoculturalassociationitaly/src/AuthProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\n// Create the AuthContext\r\nconst AuthContext = createContext();\r\n\r\n// AuthProvider component\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null); // Holds user state\r\n    const [error, setError] = useState(null); // Holds error state\r\n    const [loginSuccess, setLoginSuccess] = useState(false); // Holds login success state\r\n    const [events, setEvents] = useState([]); // Holds the events state\r\n    const [members, setMembers] = useState([]); // Holds the registered members state\r\n\r\n    // Check if there is saved login info on component mount\r\n    useEffect(() => {\r\n        const savedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n        if (savedUser) {\r\n            setUser(savedUser);\r\n            setLoginSuccess(true);\r\n        }\r\n    }, []);\r\n\r\n    // Login function\r\n    const login = (username, password, rememberMe) => {\r\n        return new Promise((resolve, reject) => {\r\n            // Example login logic; you might want to replace this with actual authentication logic\r\n            if (username === 'admin' && password === 'admin') {\r\n                const loggedInUser = { name: 'Admin', role: 'admin' };\r\n                setUser(loggedInUser);\r\n                setError(null); // Clear any previous errors\r\n                setLoginSuccess(true); // Set login success\r\n\r\n                // Save login info if \"Remember Me\" is checked\r\n                if (rememberMe) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(loggedInUser)); // Save user info\r\n                } else {\r\n                    sessionStorage.setItem(\"user\", JSON.stringify(loggedInUser)); // Save user info in sessionStorage\r\n                }\r\n\r\n                resolve(); // Login successful\r\n            } else {\r\n                setError('Invalid username or password'); // Set error message\r\n                reject(new Error('Invalid credentials')); // Reject the promise\r\n            }\r\n        });\r\n    };\r\n\r\n    // Logout function\r\n    const logout = () => {\r\n        setUser(null);\r\n        setError(null); // Clear error on logout\r\n        setLoginSuccess(false); // Reset login success on logout\r\n        localStorage.removeItem(\"user\"); // Remove saved login info from localStorage\r\n        sessionStorage.removeItem(\"user\"); // Remove saved login info from sessionStorage\r\n    };\r\n\r\n    // Function to add events\r\n    const addEvent = (event) => {\r\n        setEvents((prevEvents) => [...prevEvents, event]); // Add event to the events array\r\n    };\r\n\r\n    // Function to remove events\r\n    const removeEvent = (eventToRemove) => {\r\n        setEvents((prevEvents) => prevEvents.filter(event => event !== eventToRemove)); // Remove event from the events array\r\n    };\r\n\r\n    // Function to add members\r\n    const addMember = (member) => {\r\n        setMembers((prevMembers) => [...prevMembers, member]); // Add member to the members array\r\n    };\r\n\r\n    // Function to fetch events (optional, depending on your needs)\r\n    const fetchEvents = () => {\r\n        // Fetch events from an API or database\r\n        // Example: fetch('/api/events').then(response => response.json()).then(data => setEvents(data));\r\n    };\r\n\r\n    // Provide the context value\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout, error, loginSuccess, events, addEvent, removeEvent, fetchEvents, members, addMember }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}