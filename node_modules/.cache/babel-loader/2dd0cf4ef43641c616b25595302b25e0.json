{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';// Create the AuthContext\nconst AuthContext=createContext();// AuthProvider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);// Holds user state\nconst[error,setError]=useState(null);// Holds error state\nconst[loginSuccess,setLoginSuccess]=useState(false);// Holds login success state\nconst[events,setEvents]=useState([]);// Holds the events state\nconst[members,setMembers]=useState([]);// Holds the registered members state\n// Check if there is saved login info on component mount\nuseEffect(()=>{const savedUser=JSON.parse(localStorage.getItem(\"user\"));if(savedUser){setUser(savedUser);setLoginSuccess(true);}},[]);// Login function\nconst login=(username,password,rememberMe)=>{return new Promise((resolve,reject)=>{// Example login logic; you might want to replace this with actual authentication logic\nif(username==='admin'&&password==='admin'){const loggedInUser={name:'Admin',role:'admin'};setUser(loggedInUser);setError(null);// Clear any previous errors\nsetLoginSuccess(true);// Set login success\n// Save login info if \"Remember Me\" is checked\nif(rememberMe){localStorage.setItem(\"user\",JSON.stringify(loggedInUser));// Save user info\n}else{sessionStorage.setItem(\"user\",JSON.stringify(loggedInUser));// Save user info in sessionStorage\n}resolve();// Login successful\n}else{setError('Invalid username or password');// Set error message\nreject(new Error('Invalid credentials'));// Reject the promise\n}});};// Logout function\nconst logout=()=>{setUser(null);setError(null);// Clear error on logout\nsetLoginSuccess(false);// Reset login success on logout\nlocalStorage.removeItem(\"user\");// Remove saved login info from localStorage\nsessionStorage.removeItem(\"user\");// Remove saved login info from sessionStorage\n};// Function to add events\nconst addEvent=event=>{setEvents(prevEvents=>[...prevEvents,event]);// Add event to the events array\n};// Function to remove events\nconst removeEvent=eventToRemove=>{setEvents(prevEvents=>prevEvents.filter(event=>event!==eventToRemove));// Remove event from the events array\n};// Function to add members\nconst addMember=member=>{setMembers(prevMembers=>[...prevMembers,member]);// Add member to the members array\n};// Function to fetch events (optional, depending on your needs)\nconst fetchEvents=()=>{// Fetch events from an API or database\n// Example: fetch('/api/events').then(response => response.json()).then(data => setEvents(data));\n};// Provide the context value\nreturn/*#__PURE__*/React.createElement(AuthContext.Provider,{value:{user,login,logout,error,loginSuccess,events,addEvent,removeEvent,fetchEvents,members,addMember}},children);};// Custom hook to use the AuthContext\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","AuthContext","AuthProvider","_ref","children","user","setUser","error","setError","loginSuccess","setLoginSuccess","events","setEvents","members","setMembers","savedUser","JSON","parse","localStorage","getItem","login","username","password","rememberMe","Promise","resolve","reject","loggedInUser","name","role","setItem","stringify","sessionStorage","Error","logout","removeItem","addEvent","event","prevEvents","removeEvent","eventToRemove","filter","addMember","member","prevMembers","fetchEvents","createElement","Provider","value","useAuth","context"],"sources":["C:/Users/king/OneDrive/Desktop/edoculturalassociationitaly/src/AuthProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\n// Create the AuthContext\r\nconst AuthContext = createContext();\r\n\r\n// AuthProvider component\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null); // Holds user state\r\n    const [error, setError] = useState(null); // Holds error state\r\n    const [loginSuccess, setLoginSuccess] = useState(false); // Holds login success state\r\n    const [events, setEvents] = useState([]); // Holds the events state\r\n    const [members, setMembers] = useState([]); // Holds the registered members state\r\n\r\n    // Check if there is saved login info on component mount\r\n    useEffect(() => {\r\n        const savedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n        if (savedUser) {\r\n            setUser(savedUser);\r\n            setLoginSuccess(true);\r\n        }\r\n    }, []);\r\n\r\n    // Login function\r\n    const login = (username, password, rememberMe) => {\r\n        return new Promise((resolve, reject) => {\r\n            // Example login logic; you might want to replace this with actual authentication logic\r\n            if (username === 'admin' && password === 'admin') {\r\n                const loggedInUser = { name: 'Admin', role: 'admin' };\r\n                setUser(loggedInUser);\r\n                setError(null); // Clear any previous errors\r\n                setLoginSuccess(true); // Set login success\r\n\r\n                // Save login info if \"Remember Me\" is checked\r\n                if (rememberMe) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(loggedInUser)); // Save user info\r\n                } else {\r\n                    sessionStorage.setItem(\"user\", JSON.stringify(loggedInUser)); // Save user info in sessionStorage\r\n                }\r\n\r\n                resolve(); // Login successful\r\n            } else {\r\n                setError('Invalid username or password'); // Set error message\r\n                reject(new Error('Invalid credentials')); // Reject the promise\r\n            }\r\n        });\r\n    };\r\n\r\n    // Logout function\r\n    const logout = () => {\r\n        setUser(null);\r\n        setError(null); // Clear error on logout\r\n        setLoginSuccess(false); // Reset login success on logout\r\n        localStorage.removeItem(\"user\"); // Remove saved login info from localStorage\r\n        sessionStorage.removeItem(\"user\"); // Remove saved login info from sessionStorage\r\n    };\r\n\r\n    // Function to add events\r\n    const addEvent = (event) => {\r\n        setEvents((prevEvents) => [...prevEvents, event]); // Add event to the events array\r\n    };\r\n\r\n    // Function to remove events\r\n    const removeEvent = (eventToRemove) => {\r\n        setEvents((prevEvents) => prevEvents.filter(event => event !== eventToRemove)); // Remove event from the events array\r\n    };\r\n\r\n    // Function to add members\r\n    const addMember = (member) => {\r\n        setMembers((prevMembers) => [...prevMembers, member]); // Add member to the members array\r\n    };\r\n\r\n    // Function to fetch events (optional, depending on your needs)\r\n    const fetchEvents = () => {\r\n        // Fetch events from an API or database\r\n        // Example: fetch('/api/events').then(response => response.json()).then(data => setEvents(data));\r\n    };\r\n\r\n    // Provide the context value\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout, error, loginSuccess, events, addEvent, removeEvent, fetchEvents, members, addMember }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}