{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\king\\\\OneDrive\\\\Desktop\\\\edoculturalassociationitaly\\\\src\\\\context\\\\MemberContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemberContext = /*#__PURE__*/createContext();\nexport const MemberProvider = ({\n  children\n}) => {\n  _s();\n  const [memberCount, setMemberCount] = useState(0);\n  const [applications, setApplications] = useState([]);\n\n  // Load member count and applications from localStorage on initial render\n  useEffect(() => {\n    const count = localStorage.getItem('memberCount');\n    const savedApplications = localStorage.getItem('memberApplications');\n    if (count) {\n      setMemberCount(parseInt(count));\n    }\n    if (savedApplications) {\n      setApplications(JSON.parse(savedApplications));\n    }\n  }, []);\n\n  // Update member count\n  const updateMemberCount = count => {\n    setMemberCount(count);\n    localStorage.setItem('memberCount', count.toString());\n  };\n\n  // Add new application\n  const addApplication = application => {\n    const newApplication = {\n      ...application,\n      id: Date.now(),\n      status: 'pending',\n      applicationDate: new Date().toISOString()\n    };\n    const updatedApplications = [...applications, newApplication];\n    setApplications(updatedApplications);\n    localStorage.setItem('memberApplications', JSON.stringify(updatedApplications));\n    return newApplication.id;\n  };\n\n  // Approve application\n  const approveApplication = applicationId => {\n    const updatedApplications = applications.map(app => {\n      if (app.id === applicationId) {\n        return {\n          ...app,\n          status: 'approved',\n          approvalDate: new Date().toISOString()\n        };\n      }\n      return app;\n    });\n    setApplications(updatedApplications);\n    localStorage.setItem('memberApplications', JSON.stringify(updatedApplications));\n    updateMemberCount(memberCount + 1);\n  };\n\n  // Reject application\n  const rejectApplication = applicationId => {\n    const updatedApplications = applications.map(app => {\n      if (app.id === applicationId) {\n        return {\n          ...app,\n          status: 'rejected',\n          rejectionDate: new Date().toISOString()\n        };\n      }\n      return app;\n    });\n    setApplications(updatedApplications);\n    localStorage.setItem('memberApplications', JSON.stringify(updatedApplications));\n  };\n\n  // Get applications by status\n  const getApplicationsByStatus = status => {\n    return applications.filter(app => app.status === status);\n  };\n  return /*#__PURE__*/_jsxDEV(MemberContext.Provider, {\n    value: {\n      memberCount,\n      applications,\n      addApplication,\n      approveApplication,\n      rejectApplication,\n      getApplicationsByStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(MemberProvider, \"R/1qRpZSHwUqIaaaHQA03FtfQ2I=\");\n_c = MemberProvider;\nexport const useMemberCount = () => {\n  _s2();\n  const context = useContext(MemberContext);\n  if (!context) {\n    throw new Error('useMemberCount must be used within a MemberProvider');\n  }\n  return context;\n};\n_s2(useMemberCount, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MemberProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","MemberContext","MemberProvider","children","_s","memberCount","setMemberCount","applications","setApplications","count","localStorage","getItem","savedApplications","parseInt","JSON","parse","updateMemberCount","setItem","toString","addApplication","application","newApplication","id","Date","now","status","applicationDate","toISOString","updatedApplications","stringify","approveApplication","applicationId","map","app","approvalDate","rejectApplication","rejectionDate","getApplicationsByStatus","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMemberCount","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/king/OneDrive/Desktop/edoculturalassociationitaly/src/context/MemberContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst MemberContext = createContext();\r\n\r\nexport const MemberProvider = ({ children }) => {\r\n  const [memberCount, setMemberCount] = useState(0);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  // Load member count and applications from localStorage on initial render\r\n  useEffect(() => {\r\n    const count = localStorage.getItem('memberCount');\r\n    const savedApplications = localStorage.getItem('memberApplications');\r\n    \r\n    if (count) {\r\n      setMemberCount(parseInt(count));\r\n    }\r\n    if (savedApplications) {\r\n      setApplications(JSON.parse(savedApplications));\r\n    }\r\n  }, []);\r\n\r\n  // Update member count\r\n  const updateMemberCount = (count) => {\r\n    setMemberCount(count);\r\n    localStorage.setItem('memberCount', count.toString());\r\n  };\r\n\r\n  // Add new application\r\n  const addApplication = (application) => {\r\n    const newApplication = {\r\n      ...application,\r\n      id: Date.now(),\r\n      status: 'pending',\r\n      applicationDate: new Date().toISOString()\r\n    };\r\n    const updatedApplications = [...applications, newApplication];\r\n    setApplications(updatedApplications);\r\n    localStorage.setItem('memberApplications', JSON.stringify(updatedApplications));\r\n    return newApplication.id;\r\n  };\r\n\r\n  // Approve application\r\n  const approveApplication = (applicationId) => {\r\n    const updatedApplications = applications.map(app => {\r\n      if (app.id === applicationId) {\r\n        return { ...app, status: 'approved', approvalDate: new Date().toISOString() };\r\n      }\r\n      return app;\r\n    });\r\n    setApplications(updatedApplications);\r\n    localStorage.setItem('memberApplications', JSON.stringify(updatedApplications));\r\n    updateMemberCount(memberCount + 1);\r\n  };\r\n\r\n  // Reject application\r\n  const rejectApplication = (applicationId) => {\r\n    const updatedApplications = applications.map(app => {\r\n      if (app.id === applicationId) {\r\n        return { ...app, status: 'rejected', rejectionDate: new Date().toISOString() };\r\n      }\r\n      return app;\r\n    });\r\n    setApplications(updatedApplications);\r\n    localStorage.setItem('memberApplications', JSON.stringify(updatedApplications));\r\n  };\r\n\r\n  // Get applications by status\r\n  const getApplicationsByStatus = (status) => {\r\n    return applications.filter(app => app.status === status);\r\n  };\r\n\r\n  return (\r\n    <MemberContext.Provider value={{ \r\n      memberCount, \r\n      applications,\r\n      addApplication,\r\n      approveApplication,\r\n      rejectApplication,\r\n      getApplicationsByStatus\r\n    }}>\r\n      {children}\r\n    </MemberContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useMemberCount = () => {\r\n  const context = useContext(MemberContext);\r\n  if (!context) {\r\n    throw new Error('useMemberCount must be used within a MemberProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}