{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\king\\\\OneDrive\\\\Desktop\\\\edoculturalassociationitaly\\\\src\\\\AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\n// Create the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // Holds user state\n  const [error, setError] = useState(null); // Holds error state\n  const [loginSuccess, setLoginSuccess] = useState(false); // Holds login success state\n  const [events, setEvents] = useState([]); // Holds the events state\n\n  // Check if there is saved login info on component mount\n  useEffect(() => {\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\n    if (savedUser) {\n      setUser(savedUser);\n      setLoginSuccess(true);\n    }\n  }, []);\n\n  // Login function\n  const login = (username, password, rememberMe) => {\n    return new Promise((resolve, reject) => {\n      // Example login logic; you might want to replace this with actual authentication logic\n      if (username === 'admin' && password === '') {\n        const loggedInUser = {\n          name: 'Admin',\n          role: 'admin'\n        };\n        setUser(loggedInUser);\n        setError(null); // Clear any previous errors\n        setLoginSuccess(true); // Set login success\n\n        // Save login info if \"Remember Me\" is checked\n        if (rememberMe) {\n          localStorage.setItem(\"user\", JSON.stringify(loggedInUser));\n        }\n        resolve(); // Login successful\n      } else {\n        setError('Invalid username or password'); // Set error message\n        reject(new Error('Invalid credentials')); // Reject the promise\n      }\n    });\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n    setError(null); // Clear error on logout\n    setLoginSuccess(false); // Reset login success on logout\n    localStorage.removeItem(\"user\"); // Remove saved login info\n  };\n\n  // Function to add events\n  const addEvent = event => {\n    setEvents(prevEvents => [...prevEvents, event]); // Add event to the events array\n  };\n\n  // Function to fetch events (optional, depending on your needs)\n  const fetchEvents = () => {\n    // Fetch events from an API or database\n    // Example: fetch('/api/events').then(response => response.json()).then(data => setEvents(data));\n  };\n\n  // Provide the context value\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      error,\n      loginSuccess,\n      events,\n      addEvent,\n      fetchEvents\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the AuthContext\n_s(AuthProvider, \"zkMdwFpRNOjlSGh46s3mhBjzvUc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","error","setError","loginSuccess","setLoginSuccess","events","setEvents","savedUser","JSON","parse","localStorage","getItem","login","username","password","rememberMe","Promise","resolve","reject","loggedInUser","name","role","setItem","stringify","Error","logout","removeItem","addEvent","event","prevEvents","fetchEvents","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/king/OneDrive/Desktop/edoculturalassociationitaly/src/AuthProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\n// Create the AuthContext\r\nconst AuthContext = createContext();\r\n\r\n// AuthProvider component\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null); // Holds user state\r\n    const [error, setError] = useState(null); // Holds error state\r\n    const [loginSuccess, setLoginSuccess] = useState(false); // Holds login success state\r\n    const [events, setEvents] = useState([]); // Holds the events state\r\n\r\n    // Check if there is saved login info on component mount\r\n    useEffect(() => {\r\n        const savedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n        if (savedUser) {\r\n            setUser(savedUser);\r\n            setLoginSuccess(true);\r\n        }\r\n    }, []);\r\n\r\n    // Login function\r\n    const login = (username, password, rememberMe) => {\r\n        return new Promise((resolve, reject) => {\r\n            // Example login logic; you might want to replace this with actual authentication logic\r\n            if (username === 'admin' && password === '') {\r\n                const loggedInUser = { name: 'Admin', role: 'admin' };\r\n                setUser(loggedInUser);\r\n                setError(null); // Clear any previous errors\r\n                setLoginSuccess(true); // Set login success\r\n\r\n                // Save login info if \"Remember Me\" is checked\r\n                if (rememberMe) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(loggedInUser));\r\n                }\r\n\r\n                resolve(); // Login successful\r\n            } else {\r\n                setError('Invalid username or password'); // Set error message\r\n                reject(new Error('Invalid credentials')); // Reject the promise\r\n            }\r\n        });\r\n    };\r\n\r\n    // Logout function\r\n    const logout = () => {\r\n        setUser(null);\r\n        setError(null); // Clear error on logout\r\n        setLoginSuccess(false); // Reset login success on logout\r\n        localStorage.removeItem(\"user\"); // Remove saved login info\r\n    };\r\n\r\n    // Function to add events\r\n    const addEvent = (event) => {\r\n        setEvents((prevEvents) => [...prevEvents, event]); // Add event to the events array\r\n    };\r\n\r\n    // Function to fetch events (optional, depending on your needs)\r\n    const fetchEvents = () => {\r\n        // Fetch events from an API or database\r\n        // Example: fetch('/api/events').then(response => response.json()).then(data => setEvents(data));\r\n    };\r\n\r\n    // Provide the context value\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout, error, loginSuccess, events, addEvent, fetchEvents }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}